# Castagne Base Skeleton
# This holds some base states that can be useful for all characters,
# and bakes some of the assumptions made by the standard functions.
# It is recommended a second skeleton to implement your own system
# mechanics on top of it.

:Character:
	Name: Castagne Base Character

:Constants:
	InitialState: Intro

:Variables:
	# System
	EffectiveLandingLag: 4
	DefaultLandingLag: 4
	
	# Base Physics
	Gravity:-150
	GroundFriction: 100
	
	# Character Specific
	HPMax: 10000
	
	# Physics
	WalkFSpeed: 1000
	WalkBSpeed: -800
	
	JumpsquatFrames: 4
	JumpFForce: 800
	JumpBForce: -800
	JumpNForce: 2800
	
	
	# TEMP CONSTANTS
	ANIM_KNOCKDOWN: Knockdown
	ANIM_HITSTUN_AIR: Hitstun.Air
	ANIM_HITSTUN_STAND: Hitstun.Stand
	ANIM_HITSTUN_CROUCH: Hitstun.Crouch
	ANIM_BLOCK_STAND: Block.Stand
	ANIM_BLOCK_CROUCH: Block.Crouch
	ANIM_BLOCK_AIR: Block.Air
	ANIM_TECH_INPLACE: Tech.InPlace
	ANIM_TECH_FORWARD: Tech.Forward
	ANIM_TECH_BACK: Tech.Back
	ANIM_TECH_SOFT: Tech.Back
	ANIM_TECH_AIR: Tech.Air
	ANIM_STAND: Stand
	ANIM_CROUCH: Crouch
	ANIM_WALKF: WalkF
	ANIM_WALKB: WalkB
	ANIM_JUMPSQUAT: Jumpsquat
	ANIM_LANDING: Landing
	ANIM_JUMPN: JumpN
	ANIM_JUMPF: JumpF
	ANIM_JUMPB: JumpB
	ANIM_AIRIDLE: AirIdle

# :TODO:Panthavma:20220110:Make it a default when no skeleton is specified





# Common -----------------------------------------------------------------------
#    ______                                    
#   / ____/___  ____ ___  ____ ___  ____  ____ 
#  / /   / __ \/ __ `__ \/ __ `__ \/ __ \/ __ \
# / /___/ /_/ / / / / / / / / / / / /_/ / / / /
# \____/\____/_/ /_/ /_/_/ /_/ /_/\____/_/ /_/ 

:Common:
	Colbox(-4000, 4000, 0, 15000)
	LDie:
		Transition(Dead, 1000000)
	endif
	
	LPFHit:
		LAFThrowTech:
			LPFGrounded:
				Transition(ThrowTech, 100000)
			else
				Transition(AirThrowTech, 100000)
			endif
		endif
		
		LAFThrow:
			Transition(ThrowHeld, 2000)
		else
			LAFAirthrow:
				Transition(AirthrowHeld, 2000)
			else
				#PlaySound(Hit)
				LPFGrounded:
					LAFForceKnockdown:
						Call(OnHitstunLanding)
					else
						LAFLauncher:
							Transition(HitstunAir, 1000, 1)
						else
							LCrouching:
								Transition(HitstunCrouch, 1000, 1)
							else
								Transition(HitstunStand, 1000, 1)
							endif
						endif
					endif
				else
					Transition(HitstunAir, 1000, 1)
				endif
			endif
		endif
	endif
	LPFBlock:
		#PlaySound(Block)
		LPFGrounded:
			LAFLow:
				Transition(BlockLow, 900, 1)
			else
				LAFOverhead:
					Transition(BlockHigh, 900, 1)
				else
					IDown:
						Transition(BlockLow, 900, 1)
					else
						Transition(BlockHigh, 900, 1)
					endif
				endif
			endif
		else
			Transition(BlockAir, 900, 1)
		endif
	endif


:Dead:
	Flag(Dead)
	Colbox(-200, 200, 0, 200)
	AddMomentum(0,-120)
	Anim(ANIM_HITSTUN_AIR)
	F1:
		SetMomentumAbsolute(AttackMomentumH, AttackMomentumV)
	endif
	LPFGrounded:
		Transition(DeadKnockdown, 500000)
	endif

:DeadKnockdown:
	Flag(Dead)
	Colbox(-200, 200, 0, 200)
	Anim(ANIM_KNOCKDOWN)
	BreakMomentum(500, 0)


:GroundedStateCommon:
	Call(Common)
	CapMomentum(3500,-1)

:GroundedState:
	Call(GroundedStateCommon)
	LPFAirborne:
		Transition(AirIdle, 200)
	endif
#:GroundedStatePost:
	# TODO Correct this
	LIgnoreFriction:
	else
		BreakMomentum(GroundFriction, 0)
	endif

:AirborneStateCommon:
	Call(Common)
	Flag(Airborne)
:AirborneState:
	Call(AirborneStateCommon)
	AddMomentum(0,Gravity)
	LPFGrounded:
		Transition(Landing, 200)
	endif

:VariableState:
	LPFAirborne:
		Call(AirborneStateCommon)
	else
		Call(GroundedStateCommon)
	endif



:GroundedNeutralState:
	Call(GroundedState)
	Call(ReturnedToNeutral)
	
	Flag(ApplyFacing)
	Flag(CanBlock)
	
	Call(GroundedNeutralStateTransitions)

:GroundedNeutralStateTransitions:
	Call(AttackAddAllNormalsCancels)
	Call(AttackAddSpecialCancels)
	Call(GroundedAttacks)
	
	IUp:
		Transition(Jumpsquat)
	else
		IDown:
			Transition(Crouch)
		else
			IForward:
				Transition(WalkF)
			endif
			IBack:
				Transition(WalkB)
			endif
			INeutralH:
				Transition(Idle)
			endif
		endif
	endif


:AirborneNeutralState:
	Call(AirborneState)
	Call(ReturnedToNeutral)
	
	Flag(CanBlock)
	
	Call(AirborneNeutralStateTransitions)

:AirborneNeutralStateTransitions:
	Call(AttackAddAllNormalsCancels)
	Call(AttackAddSpecialCancels)
	Call(AirborneAttacks)


:ReturnedToNeutral:
	AttackResetDoneCancels()


:Intro:
	Flag(RoundIntro)
	
	LStartRound:
		Transition(Idle, 10000)
	endif








# Hitstun ----------------------------------------------------------------------
#    __  ___ __       __            
#   / / / (_) /______/ /___  ______ 
#  / /_/ / / __/ ___/ __/ / / / __ \
# / __  / / /_(__  ) /_/ /_/ / / / /
#/_/ /_/_/\__/____/\__/\__,_/_/ /_/ 

:OnHitstunLanding:
	LAFHardKnockdown:
		Transition(HardKnockdown, 6000)
	else
		LAFKnockdown:
			Transition(Knockdown, 6000)
		else
			INeutralH:
				Transition(SoftTech, 5500)
			endif
			Call(GroundTech)
		endif
	endif


:HitstunCommon:
	Call(Common)
	Flag(Hitstun)
	F1:
		SetMomentumAbsolute(AttackMomentumH, AttackMomentumV)
	endif

:HitstunStand:
	Call(HitstunCommon)
	Hurtbox(-5000, 5000, 0, 20000)
	Anim(ANIM_HITSTUN_STAND)
	BreakMomentum(100, 0)
	FHitstunDuration:
		Transition(Idle)
	endif
	LPFAirborne:
		Transition(HitstunAir)
	endif

:HitstunCrouch:
	Call(HitstunCommon)
	Hurtbox(-5000, 5000, 0, 20000)
	Anim(ANIM_HITSTUN_CROUCH)
	Flag(Crouching)
	BreakMomentum(100, 0)
	FHitstunDuration:
		Transition(Crouch)
	endif
	LPFAirborne:
		Transition(HitstunAir)
	endif

:HitstunAir:
	Call(HitstunCommon)
	Hurtbox(-5000, 5000, 0, 20000)
	AddMomentum(0, -40)
	Anim(ANIM_HITSTUN_AIR)
	FHitstunDuration:
		Transition(AirTech)
	endif
	LPFGrounded:
		Call(OnHitstunLanding)
	endif








# Blockstun --------------------------------------------------------------------
#    ____  __           __        __            
#   / __ )/ /___  _____/ /_______/ /___  ______ 
#  / __  / / __ \/ ___/ //_/ ___/ __/ / / / __ \
# / /_/ / / /_/ / /__/ ,< (__  ) /_/ /_/ / / / /
#/_____/_/\____/\___/_/|_/____/\__/\__,_/_/ /_/ 

:BlockstunCommon:
	Flag(Blockstun)
	Flag(CanBlock)
	F1:
		SetMomentumAbsolute(AttackMomentumH, AttackMomentumV)
	endif


:BlockHigh:
	Call(GroundedState)
	Call(BlockstunCommon)
	Anim(ANIM_BLOCK_STAND)
	Hurtbox(-5000,5000,0,20000)
	LPFAirborne:
		Transition(BlockAir, 500)
	endif
	FBlockstunDuration:
		Call(GroundedNeutralStateTransitions)
	endif
:BlockLow:
	Call(GroundedState)
	Call(BlockstunCommon)
	Anim(ANIM_BLOCK_CROUCH)
	Flag(Crouching)
	Hurtbox(-5000,5000,0,15000)
	LPFAirborne:
		Transition(BlockAir, 500)
	endif
	FBlockstunDuration:
		Call(GroundedNeutralStateTransitions)
	endif
:BlockAir:
	Call(AirborneState)
	Call(BlockstunCommon)
	Anim(ANIM_BLOCK_AIR)
	Hurtbox(-5000,5000,0,20000)
	FBlockstunDuration:
		Transition(AirIdle)
	endif








# Techs ------------------------------------------------------------------------
#  ______          __        
# /_  __/__  _____/ /_  _____
#  / / / _ \/ ___/ __ \/ ___/
# / / /  __/ /__/ / / (__  ) 
#/_/  \___/\___/_/ /_/____/  


:GroundTech:
	IForward:
		Transition(ForwardTech, 5000)
	else
		IBack:
			Transition(BackTech, 5000)
		else
			Transition(NeutralTech, 5000)
		endif
	endif

:AirTech:
	Transition(AirTech, 5000)


:NeutralTech:
	Anim(ANIM_TECH_INPLACE)
	F1:
		SetMomentum(0, 0)
	endif
	F14:
		SetMomentum(0,0)
		Transition(Crouch)
	endif
:ForwardTech:
	Anim(ANIM_TECH_FORWARD)
	F1:
		SetMomentum(2000, 0)
	endif
	F14:
		SetMomentum(0,0)
		Transition(Idle)
	endif
:BackTech:
	Anim(ANIM_TECH_BACK)
	F1:
		SetMomentum(-2000, 0)
	endif
	F14:
		SetMomentum(0,0)
		Transition(Idle)
	endif
:SoftTech:
	Anim(ANIM_TECH_SOFT)
	F1:
		SetMomentum(-800, 0)
	endif
	F14:
		SetMomentum(0,0)
		Transition(Idle)
	endif
:AirTech:
	Anim(ANIM_TECH_AIR)
	F1:
		IUp:
			SetMomentum(0, 2000)
		endif
		IDown:
			SetMomentum(0, -2000)
		endif
		INeutralV:
			IForward:
				SetMomentum(2000, 250)
			endif
			IBack:
				SetMomentum(-2000, 250)
			endif
			INeutralH:
				SetMomentum(-250, 250)
			endif
		endif
	endif
	F14:
		Transition(AirIdle)
		SetMomentum(0,0)
	endif







# Knockdowns -------------------------------------------------------------------
#    __ __                  __       __                        
#   / //_/____  ____  _____/ /______/ /___ _      ______  _____
#  / ,<  / __ \/ __ \/ ___/ //_/ __  / __ \ | /| / / __ \/ ___/
# / /| |/ / / / /_/ / /__/ ,< / /_/ / /_/ / |/ |/ / / / (__  ) 
#/_/ |_/_/ /_/\____/\___/_/|_|\__,_/\____/|__/|__/_/ /_/____/  

:KnockdownCommon:
	Call(Common)
	Anim(ANIM_KNOCKDOWN)
	Colbox(-5000, 5000, 0, 2000)
	CapMomentum(2000, 0)
	BreakMomentum(500,0)

:Knockdown:
	Call(KnockdownCommon)
	F13+:
		ITech:
			Call(GroundTech)
		endif
		F43:
			Call(GroundTech)
		endif
	endif

:HardKnockdown:
	Call(KnockdownCommon)
	F50:
		Transition(NeutralTech, 5000)
	endif











# Basic Movement ---------------------------------------------------------------
#    __  ___                                     __ 
#   /  |/  /___ _   _____  ____ ___  ___  ____  / /_
#  / /|_/ / __ \ | / / _ \/ __ `__ \/ _ \/ __ \/ __/
# / /  / / /_/ / |/ /  __/ / / / / /  __/ / / / /_  
#/_/  /_/\____/|___/\___/_/ /_/ /_/\___/_/ /_/\__/  




:Idle:
	Call(GroundedNeutralState)
	Hurtbox(-5000, 5000, 0, 20000)
	Anim(ANIM_STAND)

:Crouch:
	Call(GroundedNeutralState)
	Hurtbox(-5000, 5000, 0, 15000)
	Flag(Crouching)
	Anim(ANIM_CROUCH)

:WalkF:
	Call(GroundedNeutralState)
	Hurtbox(-5000, 5000, 0, 20000)
	Anim(ANIM_WALKF)
	Move(WalkFSpeed, 0)

:WalkB:
	Call(GroundedNeutralState)
	Hurtbox(-5000, 5000, 0, 20000)
	Anim(ANIM_WALKB)
	Move(WalkBSpeed, 0)



:Jumpsquat:
	Call(Common)
	Flag(Airborne)
	Anim(ANIM_JUMPSQUAT)
	Hurtbox(-5000, 5000, 0, 15000)
	F1:
		Flag(ApplyFacing)
	endif
	
	FJumpsquatFrames:
		IForward:
			Transition(JumpF)
		endif
		IBack:
			Transition(JumpB)
		endif
		INeutralH:
			Transition(JumpN)
		endif
	endif
	
:Landing:
	Call(GroundedState)
	Flag(CanBlock)
	Hurtbox(-5000, 5000, 0, 20000)
	Anim(ANIM_LANDING)
	F1:
		Set(EffectiveLandingLag, DefaultLandingLag)
	endif
	
	FEffectiveLandingLag:
		Call(GroundedNeutralStateTransitions)
	endif
	

:JumpN:
	Call(AirborneNeutralState)
	Hurtbox(-5000, 5000, 0, 20000)
	Anim(ANIM_JUMPN)
	F1:
		AddMomentum(0, JumpNForce)
	endif
:JumpF:
	Call(AirborneNeutralState)
	Hurtbox(-5000, 5000, 0, 20000)
	Anim(ANIM_JUMPF)
	F1:
		AddMomentum(JumpFForce, JumpNForce)
	endif
:JumpB:
	Call(AirborneNeutralState)
	Hurtbox(-5000, 5000, 0, 20000)
	Anim(ANIM_JUMPB)
	F1:
		AddMomentum(JumpBForce, JumpNForce)
	endif


:AirIdle:
	Call(AirborneNeutralState)
	Hurtbox(-5000, 5000, 0, 20000)
	Anim(ANIM_AIRIDLE)






# [Attacks] --------------------------------------------------------------------
#     ___   __  __             __       
#    /   | / /_/ /_____ ______/ /_______
#   / /| |/ __/ __/ __ `/ ___/ //_/ ___/
#  / ___ / /_/ /_/ /_/ / /__/ ,< (__  ) 
# /_/  |_\__/\__/\__,_/\___/_/|_/____/  

:AttackCommon:
	Flag(Attacking)
	F1:
		Flag(Multihit)
		Set(AttackDuration, 300)
	endif

:GroundedAttackCommon:
	Call(AttackCommon)
	F1:
		Flag(ApplyFacing)
	endif
	FAttackDuration:
		LCrouching:
			Transition(Crouch)
		else
			Transition(Idle)
		endif
	endif
	Call(GroundedAttacks)

:StandingAttack:
	Call(GroundedState)
	Call(GroundedAttackCommon)
	
:CrouchingAttack:
	Call(GroundedState)
	Flag(Crouching)
	Call(GroundedAttackCommon)

:AirborneAttackCommon:
	Call(AttackCommon)
	F1:
		IBack:
			Flag(ApplyFacing)
		endif
	endif
	FAttackDuration:
		Transition(AirIdle)
	endif
	Call(AirborneAttacks)

:AirborneAttack:
	Call(AirborneState)
	Call(AirborneAttackCommon)

:VariableAttack:
	Call(VariableState)
	LPFAirborne:
		Call(AirborneAttackCommon)
	else
		Call(GroundedAttackCommon)
	endif



:AttackAddSpecialCancels:
	# :TODO:Panthavma:20220214:Add special cancels When we have specials

:AttackAddAllNormalsCancels:
	AttackAddAllCancelsOnTouchAndNeutral(A)
	AttackAddAllCancelsOnTouchAndNeutral(B)
	AttackAddAllCancelsOnTouchAndNeutral(C)
	AttackAddAllCancelsOnTouchAndNeutral(D)
	AttackAddAllCancelsOnTouchAndNeutral(A, j)
	AttackAddAllCancelsOnTouchAndNeutral(B, j)
	AttackAddAllCancelsOnTouchAndNeutral(C, j)
	AttackAddAllCancelsOnTouchAndNeutral(D, j)


:GroundedAttacks:
	AttackApplyCancels()

:AirborneAttacks:
	AttackApplyCancels(j)
